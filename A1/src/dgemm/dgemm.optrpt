Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.5.281 Build 20190815

Compiler options: -c -Ofast -std=c++11 -march=core-avx2 -fargument-noalias-global -fno-alias -qopt-report-phase=vec,loop -qopt-report=5 -o dgemm.o -DALIGNMENT=64 -DM=128 -DN=128 -DK=128 -Dk_c=64 -Dm_c=64 -Dm_r=32 -Dn_r=32 -DOPT1 -DGEBP_RE -DPRINT_FORMAT

Begin optimization report for: main(int, char **)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgemm.cpp(59,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.cpp(61,20)
      remark #15388: vectorization support: reference A[j*128+i] has aligned access   [ dgemm.cpp(62,13) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 8
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 6.000 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=4
   LOOP END
LOOP END

LOOP BEGIN at dgemm.cpp(65,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.cpp(67,20)
      remark #15388: vectorization support: reference B[j*128+i] has aligned access   [ dgemm.cpp(68,13) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 8
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 9.000 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=4
   LOOP END
LOOP END

LOOP BEGIN at dgemm.cpp(85,16)
   remark #15388: vectorization support: reference C[i] has aligned access   [ dgemm.cpp(86,23) ]
   remark #15388: vectorization support: reference C_test[i] has aligned access   [ dgemm.cpp(86,30) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.219
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=512
LOOP END

LOOP BEGIN at dgemm.cpp(134,5)
   remark #15382: vectorization support: call to function dgemm_opt(double *, double *, double *, double *, double *, double *) cannot be vectorized   [ dgemm.cpp(136,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: dgemm(double *, double *, double *)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgemm.cpp(17,5)
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 1 3 2 )
   remark #25440: unrolled and jammed by 8   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.cpp(19,13)
      remark #25440: unrolled and jammed by 8   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.cpp(18,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at dgemm.cpp(18,9)
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15388: vectorization support: reference C[n*128+m] has aligned access   [ dgemm.cpp(20,17) ]
         remark #15389: vectorization support: reference A[k*128+m] has unaligned access   [ dgemm.cpp(20,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.215
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 8 
         remark #15449: unmasked aligned unit stride stores: 64 
         remark #15450: unmasked unaligned unit stride loads: 8 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 608 
         remark #15477: vector cost: 114.000 
         remark #15478: estimated potential speedup: 4.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=32
      LOOP END

      LOOP BEGIN at dgemm.cpp(18,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================
